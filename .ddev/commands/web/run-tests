#!/bin/bash

## Description: Local TYPO3 Test runner
## Usage: run-tests [flags]
## Example: "ddev run-tests"
## Flags: [{"Name":"version","Shorthand":"v","Type":"string","DefValue":"all","Usage":"Switch of TYPO3 version (11)"},{"Name":"filter","Shorthand":"f","Type":"string","DefValue":"MySpecialTest","Usage":"filter Test runnings"},{"Name":"test","Shorthand":"t","Type":"string","Usage":"Test mode (all|func|unit)","DefValue":"all","Name":"only-test","Shorthand":"o","Usage":"Flag triggers only tests without version update","NoOptDefVal":"1"}]
## ProjectTypes: typo3

versions=(all 12 11)
testcases=(all func unit)
selectedVersion=
testCase=all
currentVersion=
filter=
onlyTest=0
while :; do
    case ${1:-} in
    -v | --version)
        if [[ "${versions[*]}" =~ "$2" ]]; then
            selectedVersion="$2"
            shift 2
        fi
        ;;
    -f | --filter)
        filter="$2"
        shift 2
        ;;

    -t | --test)
        if [[ "${testcases[*]}" =~ "$2" ]]; then
            testCase="$2"
            shift 2
        fi
        ;;
    -o | --only-test)
        onlyTest=1
        shift
        ;;
    --)
        shift
        break
        ;;
    *)
        shift
        break
        ;;
    esac
done

prepare_test_instance() {
    echo "Instantiating TYPO3 v${currentVersion} for Test"
    bash ./Build/Scripts/composer-for-core-version.sh $currentVersion
}

run_functional() {
    fileName=".test-results/functional-${currentVersion}.txt"
    echo "" >$fileName
    if [ "${filter}" = "" ]; then
        composer test:php:functional -- >>$fileName
    else
        composer test:php:functional -- --filter="$filter" $fileName
    fi
}

run_functional10() {
    fileName=".test-results/functional-${currentVersion}.txt"
    echo "" >$fileName
    if [ "${filter}" = "" ]; then
        composer test:php:functional10 -- >>$fileName
    else
        composer test:php:functional10 -- --filter="$filter" $fileName
    fi
}

run_unit() {
    fileName=".test-results/unit-${currentVersion}.txt"
    echo "" >$fileName
    if [ "${filter}" = "" ]; then
        composer test:php:unit >>$fileName
    else
        composer test:php:unit -- --filter="$filter" >>$fileName
    fi
}

run_unit10() {
    fileName=".test-results/unit-${currentVersion}.txt"
    echo "" >$fileName
    if [ "${filter}" = "" ]; then
        composer test:php:unit10 >>$fileName
    else
        composer test:php:unit10 -- --filter="$filter" >>$fileName
    fi
}

run_test() {
    case $testCase in
    all)
        [[ "${currentVersion}" -eq 11 ]] && run_functional
        [[ "${currentVersion}" -eq 11 ]] && run_unit
        [[ "${currentVersion}" -eq 12 ]] && run_functional10
        [[ "${currentVersion}" -eq 12 ]] && run_unit10
        ;;
    unit)
        [[ "${currentVersion}" -eq 11 ]] && run_unit
        [[ "${currentVersion}" -eq 12 ]] && run_unit10
        ;;
    func)
        [[ "${currentVersion}" -eq 11 ]] && run_functional
        [[ "${currentVersion}" -eq 12 ]] && run_functional10
        ;;
    esac
}

finish() {
    echo ""
    echo ""
    echo -e "\033[5m\e[32mDone. Your results are located in ./.test-results\033[m"
}

if [[ $selectedVersion != "" ]]; then
    if [[ ${onlyTest} == 1 ]]; then
        echo ""
        echo -e "\033[0;31mUsing '--version' together with '--only-test' leads to unpredictable side effects. ABORTING!\033[0m"
        exit 1
    fi
else
    selectedVersion=all
fi

if [[ ${onlyTest} == 1 ]]; then
    currentVersion="only-test"
    run_test
    finish
    exit 0
fi
# create tests dir if not there (-p flag let us ignore errors)
mkdir -p .test-results

case $selectedVersion in
all)
    for v in ${versions[@]}; do
        if [[ ${v} != "all" ]]; then
            currentVersion=$v
            prepare_test_instance
            run_test
        fi
    done
    ;;
*)
    echo $selectedVersion
    currentVersion=$selectedVersion
    prepare_test_instance
    run_test
    ;;

esac

finish
